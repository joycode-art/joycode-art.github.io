<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JoyCode: A Hardcore Software Consultancy | JoyCode</title>
    <link>https://joycode-art.github.io/</link>
    <description>Recent content on JoyCode: A Hardcore Software Consultancy | JoyCode</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright @ [卓酷软件技术（西安）有限责任公司](https://joycode.art/) All Rights Reserved     备案号：陕ICP备2020017028号</copyright>
    <lastBuildDate>Sat, 14 Mar 2020 15:40:24 +0600</lastBuildDate><atom:link href="https://joycode-art.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可测试性设计</title>
      <link>https://joycode-art.github.io/blog/01-test-design/</link>
      <pubDate>Sat, 14 Mar 2020 15:40:24 +0600</pubDate>
      
      <guid>https://joycode-art.github.io/blog/01-test-design/</guid>
      <description>架构是完美的，实现是骨干的 在切入这个主题之前，先看一个“完美架构图”的问题。我相信你肯定看过无数多个类似这样的架构图，每个框框都排布整齐，而且显得特别高大上。
但是，实际的系统实现真的是这样吗？未必。系统往往充满了各种变化、约束、限制和条件，这些隐式的概念往往是不能“公诸于世”的。设计存在就是为了控制住系统实现的复杂度，应对软件的变化，并将这些隐式的概念显式化。
但是，我们也不能否认架构存在的意义，至少它利于个体之间的交流，利于与客户的沟通，并在更高维度的角度看待问题，并指导进一步的系统设计和实现。
分层架构 理论上，任何复杂的系统都可以用一个main函数实现，但事实上没人那么干，分层架构便是一种最朴素的系统分解和组合的架构思维，并符合大部分人的心智模型。
分层架构最大的好处在于提供了层间抽象和隔离的机制，并非常容易在工程上保证层间的契约不被破坏。例如，分层架构遵守单向依赖原则，当有人违背架构原则而引入循环依赖，采用一些架构看护的工具，使能自动检查这些行为的。
其次，分层架构有利于开展模块间并行开发和协作。每个模块只要边界清晰，便可以独立开发了。但是，任何的软件工程方法的实践，必然存在它的边际效应。
同层模块间依赖混乱、模块内实现一团乱麻， 这是很多系统实现的真实写照。虽然，层间调用和约定都得到了很好的约束和保证，但同层内的模块间的耦合程度极高，相互引用和依赖，缺失架构原则的约束和检查。</description>
    </item>
    
    <item>
      <title>实现正交设计</title>
      <link>https://joycode-art.github.io/blog/02-impl-design/</link>
      <pubDate>Sat, 14 Mar 2020 15:40:24 +0600</pubDate>
      
      <guid>https://joycode-art.github.io/blog/02-impl-design/</guid>
      <description>软件设计的目标 软件设计就是为了完成如下目标，其可验证性、重要程度依次减低。
 实现功能 易于重用 易于理解 没有冗余  实现功能 实现功能的目标压倒一起，这也是软件设计的首要标准。如何判定系统功能的完备性呢？通过所有测试用例。</description>
    </item>
    
    <item>
      <title>系统性能优化</title>
      <link>https://joycode-art.github.io/blog/04-performance/</link>
      <pubDate>Sat, 14 Mar 2020 15:40:24 +0600</pubDate>
      
      <guid>https://joycode-art.github.io/blog/04-performance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>系统构建综述</title>
      <link>https://joycode-art.github.io/blog/05-building/</link>
      <pubDate>Sat, 14 Mar 2020 15:40:24 +0600</pubDate>
      
      <guid>https://joycode-art.github.io/blog/05-building/</guid>
      <description></description>
    </item>
    
    <item>
      <title>重构技术全览</title>
      <link>https://joycode-art.github.io/blog/03-refactoring/</link>
      <pubDate>Sat, 14 Mar 2020 15:40:24 +0600</pubDate>
      
      <guid>https://joycode-art.github.io/blog/03-refactoring/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Full-Stack Designer</title>
      <link>https://joycode-art.github.io/career/job-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-4/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>Full-Stack Engineer</title>
      <link>https://joycode-art.github.io/career/job-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-6/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>Head Design</title>
      <link>https://joycode-art.github.io/career/job-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-2/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>Java Developer</title>
      <link>https://joycode-art.github.io/career/job-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-3/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>Laravel Developer</title>
      <link>https://joycode-art.github.io/career/job-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-1/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>Lead Product Designer</title>
      <link>https://joycode-art.github.io/career/job-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/career/job-5/</guid>
      <description>About Copper At Copper, we want to make your neighborhood a little more familiar.</description>
    </item>
    
    <item>
      <title>个人介绍</title>
      <link>https://joycode-art.github.io/team/01-wangbo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/team/01-wangbo/</guid>
      <description>概况介绍 资深软件技术顾问，高级架构师，全栈程序员。专注于大型系统级软件的领域建模设计、组件化重构以及服务化架构演进等领域，超过十年的软件工作和咨询经验。作为主要负责人深度参与大型嵌入式软件平台、无线4G/5G，云服务、自动驾驶及智能对话机器人等项目。深入辅导多个大规模系统级软件开展架构和代码重构，对电信领域嵌入式系统的领域建模、演进式设计、重构、自动化测试以及软件人员技能与效率提升有丰富的实战经验的独到见解。曾多次受邀作为“领域驱动设计峰会”讲师及“全球C++及系统软件大会”的讲师及大会出品人。          开源作品 CUB：面向嵌入式系统的C++基础库   介绍：CUB是一套专注于嵌入式系统的C++基础库，包括针对嵌入式系统特点的内存管理、数据结构、线程调度、设计模式等组件封装。被多个商用产品所使用，现已开源。</description>
    </item>
    
    <item>
      <title>个人介绍</title>
      <link>https://joycode-art.github.io/team/02-liuguangcong/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/team/02-liuguangcong/</guid>
      <description>概况介绍 软件技术咨询师，全栈程序员，专注于大型系统软件的领域建模设计、组件化与服务化架构演进、遗留系统重构与开发者测试等领域。拥有10多年大型电信软件系统的工作和咨询经验，在大型嵌入式软件平台、无线4G/5G业务软件、机器学习计算平台等相关领域提供技术咨询服务。曾作为“2016全球C++及系统软件大会”，“2017全球机器学习大会”，“2019全球C++软件技术大会”，“2020全球C++软件技术大会”主题讲师。拥有开源著作《TensorFlow内核剖析》一部，Google认证的机器学习GDE技术专家。          开源作品 cctest：轻量级的xUnit测试框架   介绍：cctest是一个使用C++11语言实现的xUnit测试框架，是Google Test的替代者和革新者，cctest在阿里云，华为等大型商用C++系统中得到了有效应用。</description>
    </item>
    
    <item>
      <title>个人介绍</title>
      <link>https://joycode-art.github.io/team/03-weigangqiang/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/team/03-weigangqiang/</guid>
      <description>概况介绍 拥有12年软件行业从业经验，曾先后在嵌入式平台系统、无线通信系统、大数据、人工智能对话平台、SAAS服务等领域中从事核心系统架构设计，持续性能优化与工程自动化提效工作。全栈软件工程师，精通C/C++、Java、Scala、NodeJS，Ruby和Python等各种前后端技术和语言，并对不同语言的实现模式、性能优化、构建机制有深入研究。 在工作中长期领导和赋能开发团队构筑自动化构建与测试、持续集成与部署、性能优化等各方面的能力。曾受邀作为讲师在“2019年Clickhouse北京峰会”， “2019年Ruby conf中国开发者大会”， “2020年全球C++及系统软件技术大会”，“2020年华为ICT软件技术大会”进行分享。          开源作品 mongoid_collection_separated：支持mongo表自定义拆分工具   介绍：针对ruby语言使用Mongo中超大规模数据库表的场景，实现动态配置与修改分表策略的库，支撑业务无感知使用原有接口访问拆分表。</description>
    </item>
    
    <item>
      <title>个人介绍</title>
      <link>https://joycode-art.github.io/team/04-zhangchao/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/team/04-zhangchao/</guid>
      <description> 概况介绍 软件技术咨询师。专注于大型系统软件的领域建模架构设计、遗留系统重构，开发者测试、性能优化与防护等领域。拥有10年的大规模嵌入式实时系统c/c++开发经验，为多家知名企业提供大规模嵌入式遗留系统重构、性能优化、性能防护设计、微服务架构转型设计、测试框架的设计、DevOps转型提供技术咨询服务。在咨询过程中善于技术探索与实践落地，咨询效果广受客户的好评。          咨询案例  华为:软件技术变革  嵌入式软件重构 架构设计与演进 C语言切换C++   平安集团：业务领域建模  DDD业务领域建模， 需求模型建立   深圳农商银行：手机银行技术转型  CICD搭建 设计分支模型和自动化方案 测试技术培训   中兴 :敏捷技术转型  事务级微服务框架设计 嵌入式系统性能优化，性能CI防护设计 测试框架设计 嵌入式遗留系统c++代码的重构       2020全球C++及系统软件大会  《C++Modules与大规模物理设计》            证书  EXIN DevOps Master KMP Foundation I（LeanKanban）       </description>
    </item>
    
    <item>
      <title>个人介绍</title>
      <link>https://joycode-art.github.io/team/05-tongjian/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/team/05-tongjian/</guid>
      <description>概况介绍 从业经验丰富，有十五年以上的软件行业从业经验。对软件开发端到端全流程都有丰富的经验，曾担任过软件工程师、架构师、业务分析师、项目经理、产品经理。在敏捷软件开发过程，软件设计，系统架构，大规模遗留系统重构方面有非常丰富的实战经验，不仅仅是精通各种方法论的理论内容，还针对各种理论里落地时语焉不详的部分采用不同的方法相结合的方式进行了有益补充，减少客户在落地时走弯路。 除了丰富的技术实战经验，在咨询和培训方面也有丰富的经验，曾服务华为、中移动、招行、建行、浦发、平安、京东、联想、顺丰、中石油等多家中国企业，也曾服务过Springer、Nokia等外国跨国企业。具备丰富的课程设计经验，自研了多门课程，涉及软件开发端到端每个主要环节，并且帮助多家客户设计了适合客户诉求的定制化课程。 在企业内部创新创业方面也有一定的经验，身为思特沃克中国区数字学院——“思特沃克学院”创始人，从无到有的建立起整个内训和外训团队及内部培训和对外培训业务。并将这方面的经验用于了辅导客户内部学院打造、创新项目孵化。           数字化人才培养  通讯领域 金融领域 互联网领域 能源领域 物流运输领域   校企合作 2013年至2014年与多所大学配合开展各种技术实践课及校内实验室合作，包括</description>
    </item>
    
    <item>
      <title>培训课程</title>
      <link>https://joycode-art.github.io/training/02-system-perf-copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/training/02-system-perf-copy/</guid>
      <description>性能模型 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>大会演讲</title>
      <link>https://joycode-art.github.io/training/02-system-perf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/training/02-system-perf/</guid>
      <description>性能模型 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>智能与数据工程建设</title>
      <link>https://joycode-art.github.io/solution/05-ai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/solution/05-ai/</guid>
      <description>AI芯片 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>某云技术厂商软件开源生态演进项目</title>
      <link>https://joycode-art.github.io/story/05-open-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/story/05-open-source/</guid>
      <description>客户诉求 某云技术厂商基板管理控制软件，一直采用内部开发集成交付方式。迫于竞争对手开源的压力，需要重构软件架构和工程能力，做到新的软件平台未来可以能力开放，多方协作，生态化发展。
咨询过程 和客户的架构师以及软件总工程师，一起设计新平台的软件架构和工程架构。新的架构制定了一套二进制兼容的接口标准，做到可以按照组件和插件级别进行独立开发、独立构建、独立测试以及二进制级别交付和复用。同时优化了配套的工程能力，做到可以按照组件进行代码独立分仓，采用容器技术对工具链进行标准发布和复用，搭建可以一键式获取和安装工具链并下载依赖代码同时执行构建和测试的开发框架。最后带领客户团队完成了平台核心框架的代码开发以及工程能力建设。
客户收益 新的平台设计和工程设计达成了客户未来面向开源多方协作，生态化发展的战略要求，带领客户团队完成了核心关键代码的开发和验证。</description>
    </item>
    
    <item>
      <title>某传输设备制造商千万级规模代码构建效率优化项目</title>
      <link>https://joycode-art.github.io/story/03-efficiency-optimization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/story/03-efficiency-optimization/</guid>
      <description>客户诉求 某传输设备制造商的路由器产品，代码千万级规模，整个产品的构建系统非常复杂，难以做到构建过程的全量源码溯源；此外构建效率十分低下，内部开发团队及个人级别的代码提交触发的日常构建对应的服务器开销十分巨大。
咨询过程 分析客户的构建系统，复杂度主要是一套代码构建需要支持产品类型上百款，内部又区分用户态SO，内核态KO以及资源模型构建，下层使用的交叉工具链以及硬件芯片体系架构多元。基于分析结果，重新设计开发了一套构建框架，其中使用包管理技术标准化了构建过程中的依赖管理，使用容器技术做到构建环境即代码，同时重构了部分客户业务代码以及资源脚本代码，最终帮助客户解决了构建溯源和构建效率上的问题；
客户收益 新的构建系统借助包管理和容器技术，做到了构建可重复可溯源。另外在过程中和客户进行了必要的软件代码的组件化改造，做到了软件按照组件独立构建，达到了构建时间和资源占用成倍下降。</description>
    </item>
    
    <item>
      <title>某全球知名电信设备商的软件架构演进项目</title>
      <link>https://joycode-art.github.io/story/01-architecture-evolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/story/01-architecture-evolution/</guid>
      <description>客户诉求 某无线设备软件，为了支持全球客户，一套软件（百万代码行）需要兼容每年交付几十块不同的硬件单板（单板上的芯片和物理器件不完全相同），导致软件架构腐化快，构建工程复杂难以溯源、测试效率低，软件难以裁剪，不能满足国外高端客户的代码白盒质量监视要求。
咨询过程 根据客户软件特点，分析软件需要响应的变化方向和裁剪需求，结合构建溯源和测试效率要求，和客户业务专家一起对软件进行领域建模，将不同的软件变化方向、生命周期、裁剪尺度进行组件化解耦，同时设计了一套硬件单板软件的在线建模配置以及代码生成工具链，帮助客户提升开发和测试效率。带领客户攻关团队进行了架构打样，完成了核心代码的开发测试和交付，过程中同时帮客户构筑起更加高效的软件构建工程和开发者测试工程能力。
客户收益 新的设计方案完全解决客户问题，获得客户高度认可。带领客户团队开发交付了核心代码验证了架构设计，新开发的代码相比原来同样功能的代码量下降70%，同时构建效率提升了一倍。</description>
    </item>
    
    <item>
      <title>某无线设备提供商软件性能优化项目</title>
      <link>https://joycode-art.github.io/story/02-system-perf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/story/02-system-perf/</guid>
      <description>客户诉求 某电信技术公司的核心设备产品，与竞争对手公司产品相比，关键业务性能指标落后一倍，希望借助架构和代码优化提升性能，同时降低资源占用。
咨询过程 分析客户业务场景，走读客户代码，对代码进行了静态和动态的性能建模分析。通过对模型进行设计优化，从静态视图推导更合理的高性能内存模型，从动态视图推导更高效的调度和计算模型，以此给出新的设计方案。在方案获得客户认可后，和客户团队合作进行代码重构，同时在重构的过程中建立了自动化性能测试度量工程、制定了高性能编码规范、以及搭建了面向性能的持续集成环境相关的工程基础设施。
客户收益 按照新设计重构后的代码业务性能指标提升了1.5倍，超过了预期目标，同时内存占用下降了30%。同时，帮客户搭建的性能持续测试和看护工程交接给客户团队持续演进和维护。</description>
    </item>
    
    <item>
      <title>某自动驾驶软件自动化仿真测试项目</title>
      <link>https://joycode-art.github.io/story/04-auto-testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/story/04-auto-testing/</guid>
      <description>客户诉求 某自动驾驶软件团队开发的自动驾驶软件需要经过仿真软件测试才能进入真车试验场以及上路测试。客户在自动驾驶仿真软件上述测试过程是全人工的，对于回归类测试效率低下，无法满足自动驾驶软件的高效迭代演进的需求。
咨询过程 顾问入场后，根据客户场景，设计基于仿真软件的自动化测试方案。根据仿真软件提供的各种API，将其编程自动化；同时设计开发一套自动驾驶的测试断言系统，用于组合描述各种路况和车辆状态以及时间序列断言。同时提供一套测试专用语言（DSL），供测试人员低成本的进行用例描述。最后实现一套测试调度框架，完成仿真初始化、场景加载，测试调度执行，断言，过程录制与回放以及测试结果的可视化展示。
客户收益 与客户团队合作设计开发完成自动驾驶仿真测试框架，赋能客户测试团队开发了自动化回归测试用例上百条，部署在持续集成服务器自动回归测试，大大提高了客户自动驾驶软件的测试和演进效率。</description>
    </item>
    
    <item>
      <title>硬核技术赋能</title>
      <link>https://joycode-art.github.io/solution/01-hardcore-tech/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/solution/01-hardcore-tech/</guid>
      <description>操作系统 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>系统级软件工程效率</title>
      <link>https://joycode-art.github.io/solution/04-efficiency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/solution/04-efficiency/</guid>
      <description>DevOps原则 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>训练营</title>
      <link>https://joycode-art.github.io/training/01-refactor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/training/01-refactor/</guid>
      <description>操作系统 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>软件架构设计与演进</title>
      <link>https://joycode-art.github.io/solution/02-soft-arch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/solution/02-soft-arch/</guid>
      <description>架构风格 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
    <item>
      <title>高性能软件工程</title>
      <link>https://joycode-art.github.io/solution/03-system-perf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://joycode-art.github.io/solution/03-system-perf/</guid>
      <description>性能模型 在计算机工程中，计算机体系结构是描述计算机系统功能，组织和实现的一组规则和方法。它主要包括指令集、内存管理、I/O 和总线结构。</description>
    </item>
    
  </channel>
</rss>
